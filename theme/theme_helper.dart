import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:kavach_project/core/utils/size_utils.dart';
import '../../core/app_export.dart';
import '../core/utils/pref_utils.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onPrimaryContainer.withOpacity(1),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(18.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.purple100,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.purple10002,
          fontSize: 19.fSize,
          fontFamily: 'Arial',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: colorScheme.primaryContainer,
          fontSize: 13.fSize,
          fontFamily: 'Arial',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.primaryContainer,
          fontSize: 11.fSize,
          fontFamily: 'Arial',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: colorScheme.primaryContainer,
          fontSize: 49.fSize,
          fontFamily: 'Arial',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: colorScheme.onPrimary.withOpacity(1),
          fontSize: 27.fSize,
          fontFamily: 'Kalam',
          fontWeight: FontWeight.w400,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray500,
          fontSize: 12.fSize,
          fontFamily: 'Arial',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: colorScheme.primaryContainer,
          fontSize: 20.fSize,
          fontFamily: 'Arial',
          fontWeight: FontWeight.w400,
        ),
        titleMedium: TextStyle(
          color: colorScheme.primaryContainer,
          fontSize: 16.fSize,
          fontFamily: 'Arial',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFE9DEEC),
    primaryContainer: Color(0XFF5C343E),
    secondaryContainer: Color(0X77DBD5DE),

    // Error colors
    errorContainer: Color(0XFF98959A),
    onError: Color(0XFFF8E4FF),

    // On colors(text colors)
    onPrimary: Color(0X006B0D8C),
    onPrimaryContainer: Color(0XD4FFFFFF),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);

  // BlueGray
  Color get blueGray10000 => Color(0X00D9D9D9);

  // DeepPurple
  Color get deepPurple100 => Color(0XFFD6C2DD);
  Color get deepPurple10001 => Color(0XFFD6BEE1);
  Color get deepPurple10002 => Color(0XFFD7BEE1);

  // Gray
  Color get gray100 => Color(0XFFF6F6F6);
  Color get gray10001 => Color(0XFFFAF2FA);
  Color get gray500 => Color(0XFF909090);
  Color get gray50001 => Color(0XFF939393);
  Color get gray50002 => Color(0XFFB28A94);
  Color get gray50003 => Color(0XFFA5A5A5);
  Color get gray600 => Color(0XFF7C7C7C);
  Color get gray60001 => Color(0XFF8C6899);
  Color get gray700 => Color(0XFF70457F);
  Color get gray70001 => Color(0XFF683F72);
  Color get gray70002 => Color(0XFF673F71);
  Color get gray800 => Color(0XFF512560);
  Color get gray80001 => Color(0XFF4C2559);
  Color get gray80002 => Color(0XFF4C2659);

  // GrayEb
  Color get gray300Eb => Color(0XEBDFDFDF);

  // Grayb
  Color get gray5009b => Color(0X9BA7A7A7);

  // Purple
  Color get purple100 => Color(0XFFD8BEE1);
  Color get purple10001 => Color(0XFFDCBFE3);
  Color get purple10002 => Color(0XFFEBB9E9);
  Color get purple200 => Color(0XFFD197E5);
  Color get purple50 => Color(0XFFF2DAF1);
  Color get purple5000 => Color(0X00F7E2FF);
  Color get purple5001 => Color(0XFFF2CEFF);
  Color get purpleA100 => Color(0XFFEA9BEA);

  // PurpleC
  Color get purple100C9 => Color(0XC9DBC1E4);

  // PurpleD
  Color get purple50D1 => Color(0XD1F1E5F5);

  // White
  Color get whiteA700 => Color(0XFFFFFDFD);
  Color get whiteA70001 => Color(0XFFFDFDFD);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
